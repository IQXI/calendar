// Code generated by protoc-gen-go. DO NOT EDIT.
// source: API.proto

package calendar

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UpdateRequest struct {
	Event                *Event   `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{0}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *UpdateRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RemoveRequest struct {
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveRequest) Reset()         { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()    {}
func (*RemoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{1}
}

func (m *RemoveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveRequest.Unmarshal(m, b)
}
func (m *RemoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveRequest.Marshal(b, m, deterministic)
}
func (m *RemoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRequest.Merge(m, src)
}
func (m *RemoveRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveRequest.Size(m)
}
func (m *RemoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRequest proto.InternalMessageInfo

func (m *RemoveRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ChangeEventResult struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Result               bool     `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeEventResult) Reset()         { *m = ChangeEventResult{} }
func (m *ChangeEventResult) String() string { return proto.CompactTextString(m) }
func (*ChangeEventResult) ProtoMessage()    {}
func (*ChangeEventResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{2}
}

func (m *ChangeEventResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeEventResult.Unmarshal(m, b)
}
func (m *ChangeEventResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeEventResult.Marshal(b, m, deterministic)
}
func (m *ChangeEventResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeEventResult.Merge(m, src)
}
func (m *ChangeEventResult) XXX_Size() int {
	return xxx_messageInfo_ChangeEventResult.Size(m)
}
func (m *ChangeEventResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeEventResult.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeEventResult proto.InternalMessageInfo

func (m *ChangeEventResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ChangeEventResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type GetResult struct {
	Error                string     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Events               *EventList `protobuf:"bytes,2,opt,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetResult) Reset()         { *m = GetResult{} }
func (m *GetResult) String() string { return proto.CompactTextString(m) }
func (*GetResult) ProtoMessage()    {}
func (*GetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{3}
}

func (m *GetResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetResult.Unmarshal(m, b)
}
func (m *GetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetResult.Marshal(b, m, deterministic)
}
func (m *GetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResult.Merge(m, src)
}
func (m *GetResult) XXX_Size() int {
	return xxx_messageInfo_GetResult.Size(m)
}
func (m *GetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResult.DiscardUnknown(m)
}

var xxx_messageInfo_GetResult proto.InternalMessageInfo

func (m *GetResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetResult) GetEvents() *EventList {
	if m != nil {
		return m.Events
	}
	return nil
}

type GetRequest struct {
	DateTime             *timestamp.Timestamp `protobuf:"bytes,1,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{4}
}

func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (m *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(m, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

func (m *GetRequest) GetDateTime() *timestamp.Timestamp {
	if m != nil {
		return m.DateTime
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateRequest)(nil), "calendar.updateRequest")
	proto.RegisterType((*RemoveRequest)(nil), "calendar.removeRequest")
	proto.RegisterType((*ChangeEventResult)(nil), "calendar.changeEventResult")
	proto.RegisterType((*GetResult)(nil), "calendar.getResult")
	proto.RegisterType((*GetRequest)(nil), "calendar.getRequest")
}

func init() { proto.RegisterFile("API.proto", fileDescriptor_cac38fe7d323f2d0) }

var fileDescriptor_cac38fe7d323f2d0 = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x61, 0x6b, 0xe2, 0x40,
	0x14, 0x3c, 0x15, 0x45, 0x5f, 0x4e, 0xbd, 0x5b, 0xe5, 0x4e, 0xd2, 0x0f, 0x4a, 0xa0, 0x20, 0x14,
	0x22, 0x58, 0xe8, 0x37, 0x5b, 0x04, 0x2d, 0x08, 0x6d, 0x91, 0x20, 0xf4, 0x73, 0x34, 0xaf, 0xeb,
	0xd2, 0x24, 0x6b, 0x77, 0x37, 0x42, 0xff, 0x46, 0x7f, 0x71, 0x71, 0x37, 0x1a, 0x8c, 0xd0, 0x16,
	0x3f, 0xbe, 0x79, 0x33, 0xb3, 0xfb, 0x66, 0xa0, 0x36, 0x9e, 0xcf, 0xdc, 0x8d, 0xe0, 0x8a, 0x93,
	0xea, 0xca, 0x0f, 0x31, 0x0e, 0x7c, 0x61, 0x77, 0x29, 0xe7, 0x34, 0xc4, 0x81, 0xc6, 0x97, 0xc9,
	0xcb, 0x40, 0xb1, 0x08, 0xa5, 0xf2, 0xa3, 0x8d, 0xa1, 0xda, 0xbf, 0x71, 0x8b, 0xb1, 0x92, 0x66,
	0x72, 0xee, 0xa1, 0x9e, 0x6c, 0x02, 0x5f, 0xa1, 0x87, 0x6f, 0x09, 0x4a, 0x45, 0x2e, 0xa1, 0xac,
	0x09, 0x9d, 0x42, 0xaf, 0xd0, 0xb7, 0x86, 0x4d, 0x77, 0xef, 0xec, 0x4e, 0x77, 0xb0, 0x67, 0xb6,
	0xa4, 0x01, 0x45, 0x16, 0x74, 0x8a, 0xbd, 0x42, 0xbf, 0xec, 0x15, 0x59, 0xe0, 0x74, 0xa1, 0x2e,
	0x30, 0xe2, 0xdb, 0x83, 0x4f, 0x9e, 0x30, 0x86, 0xbf, 0xab, 0xb5, 0x1f, 0x53, 0x34, 0x36, 0x28,
	0x93, 0x50, 0x91, 0x36, 0x94, 0x51, 0x08, 0x2e, 0xf4, 0x63, 0x35, 0xcf, 0x0c, 0xe4, 0x1f, 0x54,
	0x84, 0xde, 0x6b, 0x79, 0xd5, 0x4b, 0x27, 0xe7, 0x09, 0x6a, 0x14, 0xbf, 0x96, 0x5e, 0x41, 0xc5,
	0x9c, 0xa7, 0xa5, 0xd6, 0xb0, 0x95, 0xfb, 0xfe, 0x03, 0x93, 0xca, 0x4b, 0x29, 0xce, 0x04, 0x40,
	0xfb, 0x99, 0x0f, 0xdf, 0x40, 0x75, 0x97, 0xc3, 0x82, 0x45, 0x98, 0xde, 0x6e, 0xbb, 0x26, 0x4b,
	0x77, 0x9f, 0xa5, 0xbb, 0xd8, 0x67, 0xe9, 0x1d, 0xb8, 0xc3, 0x8f, 0x12, 0x94, 0xc6, 0xf3, 0x19,
	0x19, 0x81, 0xc5, 0x62, 0x89, 0x42, 0xe9, 0x87, 0x48, 0x3e, 0x38, 0xfb, 0x22, 0x03, 0x4e, 0x82,
	0x70, 0x7e, 0x91, 0x29, 0x58, 0xa6, 0x08, 0x23, 0xff, 0x9f, 0xb1, 0x8f, 0xfa, 0xf9, 0x81, 0x8d,
	0xe9, 0xe1, 0xc4, 0xe6, 0xa8, 0x9e, 0xef, 0x6c, 0x46, 0xd0, 0xa0, 0xa8, 0x26, 0x3e, 0x0b, 0xdf,
	0xf5, 0x42, 0x92, 0x76, 0x26, 0xc8, 0x42, 0xb3, 0x5b, 0x39, 0x34, 0x95, 0xdf, 0x42, 0x93, 0xa2,
	0x7a, 0x46, 0x7c, 0x3d, 0x4f, 0x7f, 0x07, 0x7f, 0x28, 0xaa, 0x47, 0x1e, 0xab, 0xf5, 0x59, 0x06,
	0xcb, 0x8a, 0xae, 0xec, 0xfa, 0x33, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x8c, 0xa6, 0x00, 0x23, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	InsertEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ChangeEventResult, error)
	UpdateEvent(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ChangeEventResult, error)
	RemoveEvent(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*ChangeEventResult, error)
	GetDailyEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error)
	GetWeeklyEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error)
	GetMonthlyEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) InsertEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ChangeEventResult, error) {
	out := new(ChangeEventResult)
	err := c.cc.Invoke(ctx, "/calendar.API/insertEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateEvent(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*ChangeEventResult, error) {
	out := new(ChangeEventResult)
	err := c.cc.Invoke(ctx, "/calendar.API/updateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RemoveEvent(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*ChangeEventResult, error) {
	out := new(ChangeEventResult)
	err := c.cc.Invoke(ctx, "/calendar.API/removeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetDailyEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error) {
	out := new(GetResult)
	err := c.cc.Invoke(ctx, "/calendar.API/getDailyEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetWeeklyEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error) {
	out := new(GetResult)
	err := c.cc.Invoke(ctx, "/calendar.API/getWeeklyEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetMonthlyEvents(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error) {
	out := new(GetResult)
	err := c.cc.Invoke(ctx, "/calendar.API/getMonthlyEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	InsertEvent(context.Context, *Event) (*ChangeEventResult, error)
	UpdateEvent(context.Context, *UpdateRequest) (*ChangeEventResult, error)
	RemoveEvent(context.Context, *RemoveRequest) (*ChangeEventResult, error)
	GetDailyEvents(context.Context, *GetRequest) (*GetResult, error)
	GetWeeklyEvents(context.Context, *GetRequest) (*GetResult, error)
	GetMonthlyEvents(context.Context, *GetRequest) (*GetResult, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) InsertEvent(ctx context.Context, req *Event) (*ChangeEventResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEvent not implemented")
}
func (*UnimplementedAPIServer) UpdateEvent(ctx context.Context, req *UpdateRequest) (*ChangeEventResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (*UnimplementedAPIServer) RemoveEvent(ctx context.Context, req *RemoveRequest) (*ChangeEventResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEvent not implemented")
}
func (*UnimplementedAPIServer) GetDailyEvents(ctx context.Context, req *GetRequest) (*GetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyEvents not implemented")
}
func (*UnimplementedAPIServer) GetWeeklyEvents(ctx context.Context, req *GetRequest) (*GetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeeklyEvents not implemented")
}
func (*UnimplementedAPIServer) GetMonthlyEvents(ctx context.Context, req *GetRequest) (*GetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyEvents not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_InsertEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InsertEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.API/InsertEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InsertEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.API/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateEvent(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RemoveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RemoveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.API/RemoveEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RemoveEvent(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetDailyEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetDailyEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.API/GetDailyEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetDailyEvents(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetWeeklyEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetWeeklyEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.API/GetWeeklyEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetWeeklyEvents(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetMonthlyEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetMonthlyEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.API/GetMonthlyEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetMonthlyEvents(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "insertEvent",
			Handler:    _API_InsertEvent_Handler,
		},
		{
			MethodName: "updateEvent",
			Handler:    _API_UpdateEvent_Handler,
		},
		{
			MethodName: "removeEvent",
			Handler:    _API_RemoveEvent_Handler,
		},
		{
			MethodName: "getDailyEvents",
			Handler:    _API_GetDailyEvents_Handler,
		},
		{
			MethodName: "getWeeklyEvents",
			Handler:    _API_GetWeeklyEvents_Handler,
		},
		{
			MethodName: "getMonthlyEvents",
			Handler:    _API_GetMonthlyEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API.proto",
}
